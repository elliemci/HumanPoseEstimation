{"version":3,"sources":["utilities.js","dataProcessing.js","modelTraining.js","App.js","modelInference.js","reportWebVitals.js","index.js"],"names":["color","toTuple","y","x","drawPoint","ctx","r","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","scale","ay","ax","by","bx","moveTo","lineTo","lineWidth","strokeStyle","stroke","processData","rawData","training_size","round","length","rawDatasetShuffled","tf","array","shuffle","rawDatasetTraining","take","rawDatasetValidation","skip","map","xs","ys","labels","Object","values","batch","buildModel","numOfFeatures","model","add","dense","inputShape","units","activation","compile","optimizer","adam","loss","metrics","runTraining","convertedDatasetTraining","convertedDatasetValidation","a","fitDataset","epochs","validationData","callbacks","onEpochEnd","epoch","logs","console","log","acc","val_loss","val_acc","save","DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","Alert","elevation","useStyles","makeStyles","backgroundAppBar","background","title","flexGrow","textAlign","statsCard","width","singleLine","display","alignItems","justifyContent","formControl","minWidth","delay","time","Promise","resolve","reject","isNaN","Error","setTimeout","App","webcamRef","useRef","canvasRef","useState","setModel","trainModel","setTrainModel","poseEstimationLoop","isPoseEstimation","setIsPoseEstimation","opCollectData","setOpCollectData","workout","name","workoutState","setWorkoutState","snackbarDataColl","setSnackbarDataColl","snackbarDataNotColl","setSnackbarDataNotColl","snackbarWorkoutError","setSnackbarWorkoutError","setRawData","dataCollect","setDataCollect","isPoseEstimationWorkout","setIsPoseEstimationWorkout","state","runningWorkout","modelWorkout","workoutCallDelay","workoutDelayStart","jumpingJackCount","setJumpingJackCount","jjCount","wallSitCount","setWallSitCount","wsCount","lungesCount","setLungesCount","lCount","jumpingJackCountTotal","setJumpingJackCountTotal","wallSitCountTotal","setWallSitCountTotal","lungesCountTotal","setLungesCountTotal","historyDialog","setHistoryDialog","closeHistoryDialog","closeSnackbarDataColl","event","reason","closeSnackbarDataNotColl","snackbarTrainingError","setSnackbarTrainingError","closeSnackbarTrainingError","closeSnackbarWorkoutError","useEffect","loadPosenet","collectData","updateStats","workoutType","workoutCount","localStorage","getItem","setItem","parseInt","posenet","architecture","outputStride","inputResolution","height","multiplier","loadedModel","startPoseEstimation","current","video","readyState","setInterval","videoWidth","videoHeight","tic","Date","getTime","estimateSinglePose","flipHorizontal","then","pose","toc","inputs","i","keypoints","score","push","rawDataRow","result","data","prediction","predict","pIndex","dataSync","probability","classNames","dispose","runInference","drawCanvas","canvas","context","getContext","minConfidence","keypoint","drawKeypoints","forEach","drawSkeleton","stopPoseEstimation","clearInterval","handlePoseEstimation","input","handleTrainModel","showWorkoutHistory","jjWorkoutCount","wsWorkoutCount","lWorkoutCount","resetAll","indexedDB","deleteDatabase","Grid","container","item","AppBar","Toolbar","Button","disabled","Card","CardContent","ref","style","marginTop","marginBottom","marginLeft","marginRight","left","zindex","CardActions","gutterBottom","component","FormControl","required","InputLabel","htmlFor","NativeSelect","value","onChange","target","inputProps","id","FormHelperText","CircularProgress","Dialog","open","maxWidth","autoFocus","Snackbar","autoHideDuration","severity","onclose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d34f8b3.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as posenet from '@tensorflow-models/posenet';\nimport * as tf from '@tensorflow/tfjs-core';\n\nconst color = 'aqua';\nconst boundingBoxColor = 'red';\nconst lineWidth = 2;\n\nexport const tryResNetButtonName = 'tryResNetButton';\nexport const tryResNetButtonText = '[New] Try ResNet50';\nconst tryResNetButtonTextCss = 'width:100%;text-decoration:underline;';\nconst tryResNetButtonBackgroundCss = 'background:#e61d5f;';\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = '') {\n  var spans = document.getElementsByClassName('property-name');\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text === propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== '') {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(\n    tryResNetButtonText, tryResNetButtonBackgroundCss,\n    tryResNetButtonTextCss);\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(\n  showLoadingUI, loadingDivId = 'loading', mainDivId = 'main') {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = 'block';\n    document.getElementById(mainDivId).style.display = 'none';\n  } else {\n    document.getElementById(loadingDivId).style.display = 'none';\n    document.getElementById(mainDivId).style.display = 'block';\n  }\n}\n\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints =\n    posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(\n      toTuple(keypoints[0].position), toTuple(keypoints[1].position), color,\n      scale, ctx);\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const { y, x } = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\nexport function drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(\n    boundingBox.minX, boundingBox.minY, boundingBox.maxX - boundingBox.minX,\n    boundingBox.maxY - boundingBox.minY);\n\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext('2d');\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n","import * as tf from '@tensorflow/tfjs';\n\n\nexport function processData(rawData) {\n    // get the training size data to be 80%\n    const training_size = Math.round((rawData.length * 80) / 100);\n\n    /* There are two ways to train TensorFlow.js model: by using the ‘fit’ method or \n       the ‘fitDataset’ method, which offers better performance with streamed data. \n       To be able to use ‘fitDataset’ need to convert data arrays into a TensorFlow.js \n       Dataset object. */\n\n    // Convert the array into tfjs data using TensorFlow.js Dataset API function, shuffling with window of 10 rows\n    const rawDatasetShuffled = tf.data.array(rawData).shuffle(10)\n\n    // split the data using tfjs dataset api helper functions take() and skip()\n    const rawDatasetTraining = rawDatasetShuffled.take(training_size);\n    const rawDatasetValidation = rawDatasetShuffled.skip(training_size);\n\n    // One-hot encoding of the categorical target data, mapping the training and validation datasets\n    // Setting the dataset batch size to 30 for feed of 30 records at a time to the training loop\n    const convertedDatasetTraining =\n        rawDatasetTraining.map(({ xs, ys }) => {\n            const labels = [\n                /* implicit check for the type of exercises, value of 1, and 0 if not true\n                   and converting the target into array 1, 0, 0 = JUMPING_JACKS */\n                ys == \"JUMPING_JACKS\" ? 1 : 0,\n                ys == \"WALL_SIT\" ? 1 : 0,\n                ys == \"LUNGES\" ? 1 : 0\n            ]\n            return { xs: Object.values(xs), ys: Object.values(labels) };\n        }).batch(30)\n\n\n    const convertedDatasetValidation =\n        rawDatasetValidation.map(({ xs, ys }) => {\n            const labels = [\n                /* implicit check for the type of exercises, value of 1, and 0 if not true\n                   and converting the target into array 1, 0, 0 = JUMPING_JACKS \n                   NB: The == operator compares for equality after doing any necessary type conversions vs\n                   the === operator does not do the conversion and returns flase when two values are not the same type. */\n                ys == \"JUMPING_JACKS\" ? 1 : 0,\n                ys == \"WALL_SIT\" ? 1 : 0,\n                ys == \"LUNGES\" ? 1 : 0\n            ]\n            return { xs: Object.values(xs), ys: Object.values(labels) };\n        }).batch(30)\n\n    // PoseNet returns 17 keypoints, flatten into 2 values each thus 34 features \n    const numOfFeatures = 34;\n\n    return [numOfFeatures, convertedDatasetTraining, convertedDatasetValidation];\n\n\n};","import * as tf from '@tensorflow/tfjs'\n\n// Define a sequential model with tree dense layers using TesnorFlow.js\n/* function buildModel(numOfFeatures) {\n\n    const model = tf.sequential({\n        layers: [\n            tf.layers.dense({ inputShape: [numOfFeatures], units: 12, activation: 'relu' }),\n            tf.layers.dense({ units: 8, activation: 'relu' }),\n            tf.layers.dense({ units: 3, activation: 'softmax' }) // ouput 3 for the 3 types of training, soft max for multiple outputs\n        ]\n    });\n\n    const learningRate = 0.001;\n    const optimizer = tf.train.adam(learningRate);\n\n    model.compile({\n        optimizer: optimizer,\n        loss: \"categoricalCrossentropy\", // for multiple outputs\n        metrics: ['accuracy'],\n    });\n\n    return model;\n\n};*/\nfunction buildModel(numOfFeatures) {\n    const model = tf.sequential();\n\n    model.add(tf.layers.dense({\n        inputShape: [numOfFeatures],\n        units: 12,\n        activation: 'relu'\n    }));\n    model.add(tf.layers.dense({\n        units: 8,\n        activation: 'relu'\n    }));\n    model.add(tf.layers.dense({\n        units: 3,\n        activation: 'softmax' // for multiple outputs\n    }));\n\n    model.compile({ optimizer: tf.train.adam(0.001), loss: 'categoricalCrossentropy', metrics: 'accuracy' });\n\n    return model;\n};\n\n// The function called from Apps.js to train the model to classify workouts by type\nexport async function runTraining(convertedDatasetTraining, convertedDatasetValidation, numOfFeatures) {\n    // first build the model\n    const model = buildModel(numOfFeatures);\n    // TensorFlow.js tf.LayersModel class method .fitDataset() trains the model using datest object\n    const hist = await model.fitDataset(\n\n        convertedDatasetTraining, // dataset\n        {                         // args\n            epochs: 100,\n            validationData: convertedDatasetValidation,\n            callbacks: {\n                onEpochEnd: (epoch, logs) => {  // a list of callbacks to be called during training\n                    console.log(\"Epoch: \" + epoch +\n                        \" Loss: \" + logs.loss +\n                        \" Accuracy: \" + logs.acc +\n                        \" Validation loss: \" + logs.val_loss +\n                        \" Validation accuracy: \" + logs.val_acc);\n                }\n            }\n        }\n    );\n    // await model.save('downloads://fitness-assistant-model'); downloads the .json and binary weight values files\n    //await model.save('localstorage://fitness-assistant-model'); //saves the model in the browser's local storage\n\n    // save the model in local browser IndexDB storage which allows larger limits on the objects sizes\n    await model.save('indexeddb://fitness-assistant-model');\n    console.log(\"Model saved!\");\n\n};\n\n/*\nconst loadedModel = await tf.loadLayersModel('fitness-assistant-model');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(...).print();\n*/","import React, { useEffect, useState, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\n\nimport * as tf from '@tensorflow/tfjs';\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport '@tensorflow/tfjs-backend-webgl';\n\nimport { drawKeypoints, drawSkeleton } from \"./utilities\";\nimport { Grid, AppBar, Toolbar, Typography, Button, Card, CardContent, CardActions, CircularProgress } from '@material-ui/core';\nimport { FormControl, InputLabel, NativeSelect, FormHelperText, Snackbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport { Dialog } from '@material-ui/core';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\n// import logo from './fitness_logo.png'\nimport './App.css';\n\nimport '@tensorflow/tfjs-backend-webgl';\n\nimport { processData } from \"./dataProcessing\";\nimport { runTraining } from \"./modelTraining\";\nimport { runInference } from \"./modelInference\";\n\n// code from the Material-UI Dialog component documentation\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n/* usestyles() wraping the makeStyles function from material-ui/core,\n   for creating an object of properties which will be access and inserted\n   into the JSX; makeStyles access the returned useStyle that accepts one \n   argument: the properties to be used for interpolation in the JSX;\n   assigning that function to a variable commonly called classes; the styles\n   can be inserted into JSX with className={classes.key}, give the element a \n   class that corresponds to a set of styles created with makeStyles */\nconst useStyles = makeStyles((theme) => ({\n  backgroundAppBar: {\n    background: '#1875d2'\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'left'\n  },\n  statsCard: {\n    width: '250px',\n    margin: '10px',\n  },\n  singleLine: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n}));\n\n// helper function for delay functionality of inference on pose data\nconst delay = (time) => {\n  return new Promise((resolve, reject) => {\n    if (isNaN(time)) {\n      reject(new Error('delay requires a valid number.'));\n    } else {\n      setTimeout(resolve, time);\n    }\n  });\n}\n\nfunction App() {\n\n  // hooks that stores references to the DOM elements bypassesing the usual React state-to_UI flow\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  // define a variable model with the useState hook to stores the PoseNet model\n  const [model, setModel] = useState(null);\n  // define trainModel variable using React hook useState \n  const [trainModel, setTrainModel] = useState(false);\n  const poseEstimationLoop = useRef(null);\n\n  const [isPoseEstimation, setIsPoseEstimation] = useState(false)\n  const [opCollectData, setOpCollectData] = useState('inactive');\n  const [workoutState, setWorkoutState] = useState({\n    workout: '',\n    name: 'hai'\n  });\n\n  const [snackbarDataColl, setSnackbarDataColl] = useState(false);\n  const [snackbarDataNotColl, setSnackbarDataNotColl] = useState(false);\n  const [snackbarWorkoutError, setSnackbarWorkoutError] = useState(false);\n\n  const [rawData, setRawData] = useState([]);\n  const [dataCollect, setDataCollect] = useState(false);\n  const [isPoseEstimationWorkout, setIsPoseEstimationWorkout] = useState(false);\n\n  const classes = useStyles();\n\n  const windowWidth = 800;\n  const windowHeight = 600;\n\n  // define global variables with function scope\n  let state = 'waiting';\n  let runningWorkout = false;\n  let modelWorkout = null;\n  let workoutCallDelay = false;\n  let workoutDelayStart = 0;\n\n  // variables for the UI cards\n  const [jumpingJackCount, setJumpingJackCount] = useState(0);\n  let jjCount = 0;\n  const [wallSitCount, setWallSitCount] = useState(0);\n  let wsCount = 0;\n  const [lungesCount, setLungesCount] = useState(0);\n  let lCount = 0;\n\n  const [jumpingJackCountTotal, setJumpingJackCountTotal] = useState(0);\n  const [wallSitCountTotal, setWallSitCountTotal] = useState(0);\n  const [lungesCountTotal, setLungesCountTotal] = useState(0);\n\n  const [historyDialog, setHistoryDialog] = useState(false);\n\n  const openHistoryDialog = () => {\n    setHistoryDialog(true);\n  }\n\n  const closeHistoryDialog = () => {\n    setHistoryDialog(false);\n  }\n\n  const openSnackbarDataColl = () => {\n    setSnackbarDataColl(true);\n  };\n\n  const closeSnackbarDataColl = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarDataColl(false);\n  };\n\n  const openSnackbarDataNotColl = () => {\n    setSnackbarDataNotColl(true);\n  };\n\n  const closeSnackbarDataNotColl = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackbarDataNotColl(false);\n  };\n\n  /*function WelcomeMessage({ children }) {\n    return <p>{children}</p>\n  }*/\n\n  // Define snackbarTrainingError\n  const [snackbarTrainingError, setSnackbarTrainingError] = useState(false);\n\n  // two methods to include a notification when there is no training data\n  const openSnackbarTrainingError = () => {\n    setSnackbarTrainingError(true);\n  };\n\n  const closeSnackbarTrainingError = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarTrainingError(false);\n  };\n\n  // snackbar componets displaying an error if no saved model is found\n  const openSnackbarWorkoutError = () => {\n    setSnackbarWorkoutError(true);\n  }\n\n  const closeSnackbarWorkoutError = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarWorkoutError(false);\n  }\n  // tell React what to do when the component is flushed with a function which performs the effect\n  useEffect(() => {\n    loadPosenet();\n  }, []);\n\n  const collectData = async () => {\n\n    setOpCollectData(\"active\");\n    await delay(10000); // add 10 seconds delay\n    // Open Material-UI component snackbar and display information\n    openSnackbarDataColl();\n    console.log(\"collecting\");\n    state = \"collecting\";\n\n    await delay(30000); //30 seconds data collection\n\n    openSnackbarDataNotColl();\n    console.log(\"not collecting\");\n    state = \"waiting\";\n\n    setOpCollectData(\"inactive\");\n  };\n\n  // update local storage for workout type and increment counter for current workout type\n  const updateStats = (workoutType) => {\n    //console.log(\"Workout type: \", workoutType);\n    let workoutCount = localStorage.getItem(workoutType);\n    //console.log(\"Workout count: \", workoutCount)\n    if (workoutCount === null) {\n      localStorage.setItem(workoutType, 1);\n    } else {\n      console.log(\"Increase counter\")\n      localStorage.setItem(workoutType, parseInt(workoutCount) + 1);\n    }\n  };\n\n  // Load the PoseNet model, which runs on JavaScript API Web Graphics Library WebGL for rendering 2d\n  const loadPosenet = async () => {\n    // variables defined with let, so that can be re-assigned\n    let loadedModel = await posenet.load({\n      architecture: 'MobileNetV1', // ResNet has higher accuracy, but longer load and inferance time\n      outputStride: 16, // how much we’re scaling down the output relative to the input image size, the higher the value the faster the performance the lower the accuracy\n      inputResolution: { width: 800, height: 600 },\n      multiplier: 0.75 // image scale factor\n    });\n\n    setModel(loadedModel)\n    console.log(\"Posenet Model Loaded..\")\n  };\n\n  const startPoseEstimation = () => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Run pose estimation with infinite loop executing every 100 milliseconds\n      poseEstimationLoop.current = setInterval(() => {\n\n        // Get Video Properties from webcampRef\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n\n        // set the width and height properties of webcamRef from the video width and height\n        webcamRef.current.video.width = videoWidth;\n        webcamRef.current.video.height = videoHeight;\n\n        // get current time\n        var tic = new Date().getTime()\n        // do pose estimation from the loaded PoseNet model, passing the webcamRef\n        model.estimateSinglePose(video, {\n          flipHorizontal: false // an input to posnet, if the pose should be flipped/ mirrored horizontally\n        }).then(pose => {\n          var toc = new Date().getTime();\n          //each pose returned by the PoseNet model comes with 17 data points with coordinates (x,y) and a score \n          let inputs = [];\n          // a loop to iterate through the pose key data points\n          for (let i = 0; i < pose.keypoints.length; i++) {\n            // for keypoints with score higher than 0.1 normalize to [-1,1] using video dims\n            let x = pose.keypoints[i].position.x;\n            let y = pose.keypoints[i].position.y;\n            // noisy data removal based on low scores\n            if (pose.keypoints[i].score < 0.1) {\n              x = 0;\n              y = 0;\n            } else {\n              // data normalization \n              x = (x / (windowWidth / 2)) - 1;\n              y = (y / (windowHeight / 2)) - 1;\n            }\n            // save the x and y coordiantes into a flatten/ single array\n            inputs.push(x);\n            inputs.push(y);\n          }\n\n          //console.log(\"STATE->\" + state);\n\n          if (state === \"collecting\") {\n            console.log(toc - tic, \" ms\");\n            console.log(tf.getBackend());\n            console.log(pose);\n            console.log(workoutState.workout);\n\n            // features in xs, training targets in ys\n            const rawDataRow = { xs: inputs, ys: workoutState.workout }\n\n            rawData.push(rawDataRow);\n            setRawData(rawData); // update raw data\n\n          }\n          // code to process the inference results; run inference with a delay after a successful classification\n          // NB: Make a delay time configurable as a UI input to hable inference sensitivity\n          if (runningWorkout === true) {\n            if (workoutCallDelay === false) {\n\n              // variable to hold the data for inference\n              const rawDataRow = { xs: inputs };\n              const result = runInference(modelWorkout, rawDataRow);\n\n              // process the result and count the workout type\n              if (result !== null) {\n                if (result === 'JUMPING_JACKS') {\n                  jjCount += 1;\n                  setJumpingJackCount(jjCount);\n                  updateStats('JUMPING_JACKS');\n                } else if (result === 'WALL_SIT') {\n                  wsCount += 1;\n                  setWallSitCount(wsCount);\n                  updateStats('WALL_SIT');\n                } else if (result === 'LUNGES') {\n                  lCount += 1;\n                  setLungesCount(lCount);\n                  updateStats('LUNGES');\n                }\n                workoutCallDelay = true;\n                workoutDelayStart = new Date().getTime();\n              }\n            } else {\n              // inference with a delay, pause of 1.5 seconds before allow the next inference call\n              const workoutTimeDiff = new Date().getTime() - workoutDelayStart;\n              if (workoutTimeDiff > 1500) { // inference time can't be that long as it will skip an expercise being done\n                workoutDelayStart = 0;\n                workoutCallDelay = false;\n              }\n            }\n          }\n\n          drawCanvas(pose, videoWidth, videoHeight, canvasRef);\n        });\n      }, 100);\n    }\n  };\n\n  const drawCanvas = (pose, videoWidth, videoHeight, canvas) => {\n\n    const context = canvas.current.getContext(\"2d\");\n\n    canvas.current.width = videoWidth;\n    canvas.current.height = videoHeight;\n\n    drawKeypoints(pose[\"keypoints\"], 0.5, context);\n    drawSkeleton(pose[\"keypoints\"], 0.5, context);\n  };\n\n  const stopPoseEstimation = () => clearInterval(poseEstimationLoop.current);\n\n  const handlePoseEstimation = async (input) => {\n    // check the mode\n    if (input === \"START_WORKOUT\") {\n      if (isPoseEstimationWorkout) {\n        // stop the workout and execute code when Stop button is pressed\n        runningWorkout = false;\n        setIsPoseEstimationWorkout(false);\n        stopPoseEstimation();\n      } else {\n        runningWorkout = true;\n        try {// load the saved model\n          modelWorkout = await tf.loadLayersModel('indexeddb://fitness-assistant-model');\n          setIsPoseEstimationWorkout(true);\n          startPoseEstimation();\n        } catch (err) {// display an error if no saved model was found\n          openSnackbarWorkoutError();\n        }\n      }\n    }\n\n    if (input === 'COLLECT_DATA') {\n      if (isPoseEstimation) {\n        if (opCollectData === 'inactive') {\n          setIsPoseEstimation(current => !current);\n          stopPoseEstimation();\n          state = 'waiting';\n          setDataCollect(false);\n        }\n      } else {\n        if (workoutState.workout.length > 0) {\n          setIsPoseEstimation(current => !current);\n          startPoseEstimation();\n          collectData();\n          setDataCollect(true);\n        }\n      }\n    }\n  };\n\n  const handleWorkoutSelect = (event) => {\n    const name = event.target.name;\n    setWorkoutState({\n      ...workoutState,\n      [name]: event.target.value,\n    });\n  };\n\n  const handleTrainModel = async () => {\n\n    if (rawData.length > 0) {\n      // print collected data size info\n      console.log('Data size: ' + rawData.length);\n      // use setTrainModel to set the trainModel variable to true before training\n      setTrainModel(true);\n      // call the data processing helper function which returns three variables\n      const [numOfFeatures, convertedDatasetTraining, convertedDatasetValidation] = processData(rawData);\n      // call the function runTraining from modelTraining.js, called with await since asynchrous, passing the result from the processData\n      await runTraining(convertedDatasetTraining, convertedDatasetValidation, numOfFeatures);\n      // after training the set the trainModel variable to false\n      setTrainModel(false);\n    } else {\n      openSnackbarTrainingError();\n    }\n  }\n\n  const showWorkoutHistory = () => {\n    // read the workout information from local storage\n    let jjWorkoutCount = localStorage.getItem(\"JUMPING_JACKS\") === null ? 0 : localStorage.getItem(\"JUMPING_JACKS\");\n    let wsWorkoutCount = localStorage.getItem(\"WALL_SIT\") === null ? 0 : localStorage.getItem(\"WALL_SIT\");\n    let lWorkoutCount = localStorage.getItem(\"LUNGES\") === null ? 0 : localStorage.getItem(\"LUNGES\");\n    // assign each workout count variable to the corresponding useState global variable\n    setJumpingJackCountTotal(jjWorkoutCount);\n    setWallSitCountTotal(wsWorkoutCount);\n    setLungesCountTotal(lWorkoutCount);\n\n    openHistoryDialog();\n  }\n\n  // After this function call, training data and model training need to be done from the start\n  const resetAll = async () => {\n    setRawData([]);\n\n    setJumpingJackCount(0);\n    setWallSitCount(0);\n    setLungesCount(0);\n\n    indexedDB.deleteDatabase('tensorflowjs');\n  }\n\n  return (\n    <div className=\"App\">\n\n      {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />\n       <WelcomeMessage children={'Welcome to the Virtual Fitness Assistant!'} />\n       <a\n        className=\"App-link\"\n        href=\"https://www.manning.com/bundles/pose-estimation-with-TensorFlowjs-ser\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n       > \n         Human Pose Estimation with TensorFlow.js and React\n      </a>\n      */}\n\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <AppBar position=\"static\" className={classes.backgroundAppBar}>\n            <Toolbar variant=\"dense\">\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n                Fitness Assistant\n              </Typography>\n              <Button color=\"inherit\"\n                onClick={() => handlePoseEstimation(\"START_WORKOUT\")}\n                disabled={dataCollect || trainModel}>\n                {isPoseEstimationWorkout ? \"Stop\" : \"Start Workout\"}\n              </Button>\n              <Button color=\"inherit\"\n                onClick={() => showWorkoutHistory()}\n                disabled={dataCollect || trainModel}>\n                History\n              </Button>\n              <Button color=\"inherit\"\n                onClick={() => resetAll()}\n                disabled={dataCollect || trainModel || isPoseEstimationWorkout}>\n                Reset\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Webcam\n                ref={webcamRef}\n                style={{\n                  marginTop: \"10px\",\n                  marginBottom: \"10px\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 800,\n                  height: 600,\n                }}\n              />\n              <canvas\n                ref={canvasRef}\n                style={{\n                  marginTop: \"10px\",\n                  marginBottom: \"10px\",\n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: 0,\n                  right: 0,\n                  textAlign: \"center\",\n                  zindex: 9,\n                  width: 800,\n                  height: 600,\n                }}\n              />\n            </CardContent>\n            <CardActions style={{ justifyContent: 'center' }}>\n              <Grid container spacing={0}>\n                <Grid item xs={12}>\n                  <Toolbar style={{ justifyContent: 'center' }}>\n                    <Card className={classes.statsCard}>\n                      <CardContent>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                          Jumping Jacks\n                        </Typography>\n                        <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                          {jumpingJackCount}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                    <Card className={classes.statsCard}>\n                      <CardContent>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                          Wall-Sit\n                        </Typography>\n                        <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                          {wallSitCount}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                    <Card className={classes.statsCard}>\n                      <CardContent>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                          Lunges\n                        </Typography>\n                        <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                          {lungesCount}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Toolbar>\n                </Grid>\n                <Grid item xs={12} className={classes.singleLine}>\n                  <FormControl className={classes.formControl} required>\n                    <InputLabel htmlFor=\"age-native-helper\">Workout</InputLabel>\n                    <NativeSelect\n                      value={workoutState.workout}\n                      onChange={handleWorkoutSelect}\n                      inputProps={{\n                        name: 'workout',\n                        id: 'age-native-helper',\n                      }}>\n                      <option aria-label='None' value=\"\" />\n                      <option value={'JUMPING_JACKS'}>Jumping Jacks</option>\n                      <option value={'WALL_SIT'}>Wall-Sit</option>\n                      <option value={'LUNGES'}>Lunges</option>\n                    </NativeSelect>\n                    <FormHelperText>Select training data type</FormHelperText>\n                  </FormControl>\n                  <Toolbar>\n                    <Typography style={{ marginRight: 16 }}>\n                      {/* Button with text and color property, onClick event handler calls the handle PoseEstimation method\n                        and passes COLLECT_DATA as argument. The button text and color property change when data has being collected \n                        When training is running, the Collect Data button should stay disabled. */}\n                      <Button variant=\"contained\"\n                        onClick={() => handlePoseEstimation('COLLECT_DATA')}\n                        color={isPoseEstimation ? 'secondary' : 'default'}\n                        // When training is running, the Collect Data button should stay disabled.\n                        disabled={trainModel || isPoseEstimationWorkout}>\n                        {isPoseEstimation ? \"Stop\" : \"Collect Data\"}\n                      </Button>\n                    </ Typography>\n                    <Typography style={{ marginRight: 16 }}>\n                      <Button variant=\"contained\"\n                        onClick={() => handleTrainModel()}\n                        disabled={dataCollect || isPoseEstimationWorkout}>\n                        Train Model\n                      </Button>\n                    </Typography>\n                    {/* CircularProgress component indicating when the raining process is running */}\n                    {trainModel ? <CircularProgress color=\"secondary\" /> : null}\n                  </Toolbar>\n                </Grid>\n              </Grid>\n            </CardActions>\n          </Card>\n        </Grid>\n      </Grid>\n      <Dialog onClose={closeHistoryDialog} aria-labelledby=\"customized-dialog-title\" open={historyDialog} maxWidth=\"md\">\n        <DialogTitle id=\"customized-dialog-title\" onClose={closeHistoryDialog}>\n          Workout History\n        </DialogTitle>\n        <DialogContent>\n          <Toolbar>\n            <Card className={classes.statsCard}>\n              <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                  Jumping Jacks\n                </Typography>\n                <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                  {jumpingJackCountTotal}\n                </Typography>\n              </CardContent>\n            </Card>\n            <Card className={classes.statsCard}>\n              <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                  Wall-Sit\n                </Typography>\n                <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                  {wallSitCountTotal}\n                </Typography>\n              </CardContent>\n            </Card>\n            <Card className={classes.statsCard}>\n              <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                  Lunges\n                </Typography>\n                <Typography variant=\"h2\" component=\"h2\" color=\"secondary\">\n                  {lungesCountTotal}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Toolbar>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={closeHistoryDialog} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar open={snackbarDataColl} autoHideDuration={2000} onClose={closeSnackbarDataColl}>\n        <Alert onClose={closeSnackbarDataColl} severity=\"info\">\n          Started collecting pose data!\n        </Alert>\n      </Snackbar>\n      <Snackbar open={snackbarDataNotColl} autoHideDuration={2000} onClose={closeSnackbarDataNotColl}>\n        <Alert onClose={closeSnackbarDataNotColl} severity=\"success\">\n          Completed collecting pose data!\n        </Alert>\n      </Snackbar>\n      <Snackbar open={snackbarTrainingError} autoHideDuration={2000} onclose={closeSnackbarTrainingError}>\n        <Alert onClose={closeSnackbarTrainingError} severity=\"error\">\n          Training data is not available!\n        </Alert>\n      </Snackbar>\n      <Snackbar open={snackbarWorkoutError} autoHideDuration={2000} onClose={closeSnackbarWorkoutError}>\n        <Alert onClose={closeSnackbarWorkoutError} severity=\"error\">\n          Model is not avilable!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default App;\n","import * as tf from '@tensorflow/tfjs';\n\nexport function runInference(model, data) {\n\n    // 2d tensor to hold the array of 17 data points x and y coordinates ordered sequentially returned by the PoseNet\n    const pose = tf.tensor2d(data.xs, [1, data.xs.length]);\n    // call tensorlow.js predict method\n    const prediction = model.predict(pose);\n    // get an index of top scores from the prediction(along an axis) result, containing 3 values and their probability scores\n    const pIndex = tf.argMax(prediction, 1).dataSync();\n    // tf.dataSync() downloads the values from the tensor synchronously, while tf.data() downloads the values from the tf.tensor() asynchronously and returns a promise\n    const probability = prediction.dataSync()[pIndex];\n\n    // variable to hold the workout class name\n    let result = null;\n    // consider only classifications with probabilities higher than 99%\n    if (probability > 0.7) {\n        const classNames = [\"JUMPING_JACKS\", \"WALL_SIT\", \"LUNGES\"];\n        console.log(classNames[pIndex] + \", probability: \" + probability);\n        result = classNames[pIndex];\n    }\n\n    // dispose allocated resources for the variable holding the prediction result\n    prediction.dispose();\n\n    return result;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// To measure performance in your app, pass a function to log results\n// reportWebVitals(console.log))\n// or send to an analytics endpoint check out https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}